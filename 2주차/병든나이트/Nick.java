import java.util.Scanner;

public class Nick {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.close();
        int footprint = 0;

        if (n == 1)
            footprint = 1;  // n이 1이면 움직일 수가 없다
        else if (n == 2)
            footprint = (m + 1) / 2 > 4 ? 4 : (m + 1) / 2; //n이 2면 (m + 1) / 2번만 움직일 수 있다. 그것도 최대 4칸까지만(5칸부터는 이동방법 제약이 있으니까)
        else
            if (m < 7) // m이 7이 안되면
                footprint = m > 4 ? 4 : m; // 무조건 가로로 한칸씩 움직인다. 그것도 최대 4칸까지만 (5칸부터는 이동방법 제약이 있으니까)
            else // m이 7이상이면
                footprint = m - 2; // '네가지 이동방법 만족' 조건을 만족한다. 조건을 만족하는 위치(7), 조건을 만족한 발자국 수(5)를 감안하면 m - 7 + 5, 즉 m - 2가 된다.

        System.out.println(footprint);
    }

    /*
     * 목적 :
     *   세로N * 가로M 크기 체스판의 가장 왼쪽 아래에 위치해있다.
     *   주어진 체스판 안에서 이동 횟수를 최대화하는 경로를 찾아야 한다.
     *
     * 제약사항 : 나이트의 이동경로는 다음 네가지로 정의된다
     *   (1) 2U 1R
     *   (2) 1U 2R
     *   (3) 1D 2R
     *   (4) 2D 1R
     *
     * 생각해보기 :
     *   음... 네 가지의 이동을 완수하려면,
     *       오른쪽으로   1 + 2 + 2 + 1   = 6 + 1     = 7 (가로 최소 7칸 확보 필요)
     *       위로      2 + 1 = 3
     *       아래로     2 + 1 = 3    (세로 최소 3칸 확보 필요)
     *   세로3 가로7 이하면 네가지 이동을 완수할 수 없다.
     *   그 이상이면 무조건 네가지 이동을 채워야 한다. (다만! 총 방문하게 되는 칸이 5개 미만이면 이동방법 제약 없다)
     * ---
     *   기본적으로는 이동방법 4가지를 완수해두고 (3*7지점에 가있고, 발자국이 5인 상태)
     *   n과 m을 비교해서,
     *       n이 3 이상이면서 m이 크면 (1)&(3) 콤보로만 움직이고 -> m만큼 움직일 수 있다
     *       m이 3 이상이면서 n이 크면 (2)&(4) 콤보로만 움직인다 -> n만큼 움직일 수 있다.
     * ---
     *  n이 1이면 움직일 수가 없다
     *  n이 2면 (m + 1) / 2번만 움직일 수 있다. 그것도 최대 4칸까지만(5칸부터는 이동방법 제약이 있으니까)
     *  n이 3부터는 m에 따라 발자국이 결정된다
     *      m이 7이 안되면
     *          무조건 가로로 한칸씩 움직인다. 그것도 최대 4칸까지만 (5칸부터는 이동방법 제약이 있으니까)
     *      m이 7이상이면
     *          위에 적은 조건들을 만족한다(네가지 이동방법 만족). m - 7 + 5라서 m - 2가 된다.
     */
}
